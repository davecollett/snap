#   syntax: lalr1 generator source grammar
#
#   Lapg (Lexical Analyzer and Parser Generator)
#   Copyright (C) 2002-07  Evgeny Gryaznov (inspirer@inbox.ru)
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

.lang		 "c++"
.class       "lalr1"
.getsym      "chr = *l++;if( l == end ) fillb()"
.maxtoken    4096
.stack       512
.positioning "full" 
.errorprefix "0, "

# Vocabulary

id(char*):     /[a-zA-Z_][a-zA-Z_0-9]*|'[^']+'/  { @ = _strdup(token); }
regexp(char*): /\/([^\/\\]|\\.)*\//              { @ = strstrip(token); }
cmd1(char*):   /\\.*/           { @ = _strdup(token+1); }
cmd2(char*):   /\n\t\t.*/       { @ = _strdup(token+3); }
cmd3(char*):   /{[^{}\n]*}/     { @ = strstrip(token); }
cmd4(char*):   /{{[\t ]*(\n[ \t]*([^}\n]|}[^}\n])*}?)*\n[ \t]*}}/ { @=strstriplines(token); }
str(char*):    /"[^"\n]*"/      { @ = strstrip(token); }
type(char*):   /\([^\)]+\)/     { @ = strstrip(token); }
int(int):      /-?[0-9]+/       { @ = strtol(token,NULL,10); }
eoi:           /\n%%.*/
'%':           /\n%/
_skip:         /\n|[\t\r ]+/    { continue; }
_skip:         /\n\t/
_skip:  /#.*/
'=':    /=/
'::=':  /::=/
'|':    /\|/
';':    /;/
'.':    /\./
':':    /:/
'::':   /::/
'->':   /->/
',':    /,/
'[':    /\[/
']':    /\]/
'<<':   /<</

# Attributes

[ idlist ]

# Grammar

input ::= directives lexical_part magazine_def grammar_part ;

cmdx(char*) ::= cmd1 | cmd2 { @$.line++; } | cmd3  | cmd4 { @$.line += strcount($cmd4,'\n')+1; };

cmd (char*) ::
  = cmdx
		$$ = concat( NULL, $cmdx, sourcename, @0.line );
  = cmd cmdx
		$$ = concat( $cmd, $cmdx, sourcename, (@0.line+1!=@1.line)?@1.line:-1 );
		@$ = @1;
;

directives ::= directives directive | directive ;

directive ::
  = '.' id str
		process_directive( $id, $str, @0.line, @0.column );
		delete[] $id;

  = '.' id int
		process_directive( $id, $int, @0.line, @0.column );
		delete[] $id;
;

lexical_part ::= newtypelexemopt lexemdef | lexical_part newtypelexemopt lexemdef ;

int32(int) ::= int { if( $int < 0 || $int >= BITS ) $int32 = 0; else $int32 = 1 << $int; } ;
int32_list(int) ::= int32 | int32_list int32 { $int32_list |= $int32; } ;
newtypelexem ::= '[' int32_list ']' { lb.currentgroups = $int32_list; } ;

lexemdef ::
  = id ':'
		gb.terminal($id); delete[] $id; 

  = id type ':'
		gb.terminal($id,$type); delete[] $id; delete[] $type;

  = id ':' regexp intopt cmd
		lb.lexem( gb.terminal($id), $regexp, $id, $cmd, $intopt );
		delete[] $id; delete[] $regexp; delete[] $cmd;

  = id ':' regexp intopt
		lb.lexem( gb.terminal($id), $regexp, $id, NULL, $intopt );
		delete[] $id; delete[] $regexp;

  = id type ':' regexp intopt cmd
		lb.lexem( gb.terminal($id, $type), $regexp, $id, $cmd, $intopt );
		delete[] $id; delete[] $type; delete[] $regexp; delete[] $cmd;

  = id type ':' regexp intopt
		lb.lexem( gb.terminal($id, $type), $regexp, $id, NULL, $intopt );
		delete[] $id; delete[] $type; delete[] $regexp;
;

magazine_def ::= '[' magazine_def_listopt ']' ;
magazine_def_list ::= magazine_def_list ',' attrib | attrib ;

attrib ::
  = id '->' id
		gb.symbol( $id#1, 0, NULL, gb.symbol( $id#0, 0 ) );
		delete[] $id#0;
		delete[] $id#1;
  = id
		gb.symbol( $id, 0, NULL, -1 );
		delete[] $id;
;

grammar_part ::= ruledef | grammar_part ruledef ;
ruledef ::= 
	def_rule_for '::=' rules_or ';' | 
	def_rule_for '::' rules_eq ';'  | 
	def_rule_for '[' rules_eq ']'   | 
	prioritydef ;

rules_or ::= 
	rules_or '|' stdrule | 
	stdrule ;

rules_eq ::= 
	rules_eq '=' stdrule | 
	'=' stdrule ;

prioritydef ::=
	'%' id
		if( !strcmp($id,"left")) $$ = (void*)1;
		else if( !strcmp($id,"right")) $$ = (void*)2;
		else if( !strcmp($id,"nonassoc")) $$ = (void*)3;
		else { error(0,"wrong priority declaration: %%%s",$id);$$ = 0; }
		delete[] $id;
	idlist ';' ;

idlist(int) ::= id { gb.addprio($id,$#,0); } | idlist id { gb.addprio($id,$#,1); } ;

rule_priority(int) ::=
	'<<' id { $rule_priority = gb.symbol( $id, 0 ); delete[] $id; } |
	{ $rule_priority = -1; } ;

stdrule ::
  = ids rule_priority cmd
		gb.rule( length, $rule_priority, $cmd, rule, @$.line );

  = ids rule_priority
		gb.rule( length, $rule_priority, NULL, rule, @$.line );

  = cmd rule_priority
		gb.rule( 0, $rule_priority, $cmd, rule, @$.line );

  = rule_priority
		gb.rule( 0, $rule_priority, NULL, rule, @$.line );
;

ids ::
  = ids rule_priority cmdopt id          # rule_priority must not be here
		if( $cmdopt ) {
			length += 2;
			rule[length] = gb.symbol( $id, 0 );
			rule[length-1] = gb.symbol( $id, 2, NULL, rule[length] );
			gb.rule( 0, -1, $cmdopt, rule+length-1, @1.line );
		} else rule[++length] = gb.symbol( $id, 0 );
		delete[] $id;

  = cmdopt id
		length = 0;
		if( $cmdopt ) {
			length += 2;
			rule[length] = gb.symbol( $id, 0 );
			rule[length-1] = gb.symbol( $id, 2, NULL, rule[length] );
			gb.rule( 0, -1, $cmdopt, rule+length-1, @0.line );
		} else rule[++length] = gb.symbol( $id, 0 );
		delete[] $id;
;

def_rule_for ::
  = id
		rule[0] = gb.symbol( $id, 1 );
		delete[] $id;

  = id type
		rule[0] = gb.symbol( $id, 1, $type );
		delete[] $id;
		delete[] $type;
;

# EOF

%%

#include "lalr1.h"

