//
// File: @target 
// Generated from: @sourcename 
// Date: @runtime
// 
// Built by lapg: @lapgversion


@nativecode

namespace @namespace {
  public partial class @classname {
	@nativecode


${pos
	struct lapg_place {
$#pos1		public int line;
$#pos2		public int line, column;
$#pos3		public int line, offset;
	};
$}

	struct lapg_symbol {
		public object sym;
		public int  lexem, state;
$#pos		public lapg_place pos;
$#lexemend		public lapg_place endpos;
	};

	static readonly short[] lapg_char2no = new short[] {
		@char2no
	};

	static readonly short[,] lapg_lexem = new short[@lstates,@lchars] {
		@lexem
	};

	static readonly int[] lapg_action = new int[@nstates] {
		@action
	};

${nactions
	static readonly short[] lapg_lalr = new short[@nactions] {
		@lalr
	};
$}

	static readonly short[] lapg_sym_goto = new short[@nsyms+1] {
		@sym_goto
	};

	static readonly short[] lapg_sym_from = new short[@gotosize] {
		@sym_from
	};

	static readonly short[] lapg_sym_to = new short[@gotosize] {
		@sym_to
	};

	static readonly short[] lapg_rlen = new short[@rules] {
		@rlen
	};

	static readonly short[] lapg_rlex = new short[@rules] {
		@rlex
	};

	#if DEBUG_syntax
	static readonly string[] lapg_syms = new string[] {
		@syms
	};
	#endif

	enum Tokens {
		@tokenenum
	}

	static int lapg_next( int state, int symbol ) {
${nactions
		int p;
		if( lapg_action[state] < -2 ) {
			for( p = - lapg_action[state] - 3; lapg_lalr[p] >= 0; p += 2 )
				if( lapg_lalr[p] == symbol ) break;
			return lapg_lalr[p+1];
		}
$}
		return lapg_action[state];
	}

	static int lapg_state_sym( int state, int symbol ) {
		int min = lapg_sym_goto[symbol], max = lapg_sym_goto[symbol+1]-1;
		int i, e;

		while( min <= max ) {
			e = (min + max) >> 1;
			i = lapg_sym_from[e];
			if( i == state )
				return lapg_sym_to[e];
			else if( i < state )
				min = e + 1;
			else
				max = e - 1;
		}
		return -1;
	}

	bool @parsefunc(@parseargs) {

                @nativecode
		byte[]        token = new byte[@maxtoken];
		int           lapg_head = 0, group = 0, lapg_i, lapg_size, chr;
		lapg_symbol[] lapg_m = new lapg_symbol[@maxstack];
		lapg_symbol   lapg_n;
		System.Text.ASCIIEncoding AE = new System.Text.ASCIIEncoding();
$#pos		lapg_place    lapg_current;
$#error		int           lapg_symbols_ok = 4;

$#pos1		lapg_current.line = 1;
$#pos2		lapg_current.line = lapg_current.column = 1;
$#pos3		lapg_current.offset = 0;
$#pos3		lapg_current.line = 1;
		lapg_m[0].state = 0; lapg_n.lexem = lapg_n.state = 0;
		@next;

		do {
$#pos			lapg_n.pos = lapg_current;
			for( lapg_size = 0, lapg_i = group; lapg_i >= 0; ) {
				if( lapg_size < @maxtoken-1 ) token[lapg_size++] = (byte)chr;
				lapg_i = lapg_lexem[lapg_i,lapg_char2no[chr]];
				if( lapg_i >= -1 && chr != 0 ) { 
$#pos1					if( chr == '\n' ) lapg_current.line++;
$#pos2					lapg_current.column++;
$#pos2					if( chr == '\n' ) { lapg_current.column = 1; lapg_current.line++; }
$#pos3					lapg_current.offset++;
$#pos3					if( chr == '\n' ) lapg_current.line++;
					@next;
				}
			}
$#lexemend			lapg_n.endpos = lapg_current;
			token[lapg_size] = 0;

			if( lapg_i == -1 ) {
$#pos0				@errorfunc(@errprefix System.String.Format( "invalid lexem: `{0}`, skipped", new System.String(AE.GetChars(token,0,lapg_size)) ) );
$#pos1				@errorfunc(@errprefix System.String.Format( "invalid lexem at line {0}: `{1}`, skipped", lapg_n.pos.line, new System.String(AE.GetChars(token,0,lapg_size)) ) );
$#pos2				@errorfunc(@errprefix System.String.Format( "invalid lexem at line {0}, column {1}: `{2}`, skipped", lapg_n.pos.line, lapg_n.pos.column, new System.String(AE.GetChars(token,0,lapg_size)) ) );
$#pos3				@errorfunc(@errprefix System.String.Format( "invalid lexem at offset {0}: `{1}`, skipped", lapg_n.pos.offset, new System.String(AE.GetChars(token,0,lapg_size)) ) );
				lapg_n.lexem = -1;
				continue;
			}

			token[lapg_size-1] = 0;
			lapg_n.lexem = -lapg_i-2;
			lapg_n.sym = null;

${lexemactions
			switch( lapg_n.lexem ) {
${eachlexem
				case @lexemnum:
					@lexemaction
					break;
$}
			}
$}

$#error			skip_symbols:
			do {
				lapg_i = lapg_next( lapg_m[lapg_head].state, lapg_n.lexem );

				if( lapg_i >= 0 ) {
					lapg_symbol lapg_gg;
					lapg_gg.sym = (lapg_rlen[lapg_i]!=0)?lapg_m[lapg_head+1-lapg_rlen[lapg_i]].sym:null;
					lapg_gg.lexem = lapg_rlex[lapg_i];
					lapg_gg.state = 0;
					#if DEBUG_syntax
						System.Console.WriteLine( "reduce to {0}", lapg_syms[lapg_rlex[lapg_i]] );
					#endif
$#pos					lapg_gg.pos = (lapg_rlen[lapg_i]!=0)?lapg_m[lapg_head+1-lapg_rlen[lapg_i]].pos:lapg_n.pos;
$#lexemend					lapg_gg.endpos = (lapg_rlen[lapg_i]!=0)?lapg_m[lapg_head].endpos:lapg_n.pos;
${ruleactions
					switch( lapg_i ) {
${eachaction
						case @rulenum:
							@ruleaction
							break;
$}
					}
$}
					for( int e = lapg_rlen[lapg_i]; e > 0; e-- ) lapg_m[lapg_head--].sym = null;
					lapg_m[++lapg_head] = lapg_gg;
					lapg_m[lapg_head].state = lapg_state_sym( lapg_m[lapg_head-1].state, lapg_gg.lexem );
				} else if( lapg_i == -1 ) {
					lapg_m[++lapg_head] = lapg_n;
					lapg_m[lapg_head].state = lapg_state_sym( lapg_m[lapg_head-1].state, lapg_n.lexem );
$#error					lapg_symbols_ok++;
					#if DEBUG_syntax
						System.Console.WriteLine( "shift: {0} ({1})", lapg_syms[lapg_n.lexem], new System.String(AE.GetChars(token,0,lapg_size-1)) );
					#endif
				}

			} while( lapg_i >= 0 && lapg_m[lapg_head].state != -1 );

			if( (lapg_i == -2 || lapg_m[lapg_head].state == -1) && lapg_n.lexem != 0 ) {
${error				
				while( lapg_head >= 0 && lapg_state_sym( lapg_m[lapg_head].state, @error ) == -1 ) {
					lapg_m[lapg_head].sym = null;
					lapg_head--;
				}
				if( lapg_head >= 0 ) {
					lapg_head++;
					lapg_m[lapg_head].lexem = @error;
					lapg_m[lapg_head].sym = null;
					lapg_m[lapg_head].state = lapg_state_sym( lapg_m[lapg_head-1].state, @error );
$#pos					lapg_m[lapg_head].pos = lapg_n.pos;
					if( lapg_symbols_ok >= 4 )
$#pos0						@errorfunc(@errprefix System.String.Format( "syntax error" ) );
$#pos1						@errorfunc(@errprefix System.String.Format( "syntax error before line {0}", lapg_n.pos.line ) );
$#pos2						@errorfunc(@errprefix System.String.Format( "syntax error before line {0}, column {1}", lapg_n.pos.line, lapg_n.pos.column ) );
$#pos3						@errorfunc(@errprefix System.String.Format( "syntax error before offset {0}", lapg_n.pos.offset ) );
					lapg_i = lapg_symbols_ok;
					lapg_symbols_ok = 0;
					if( lapg_i > 1 )
						goto skip_symbols;
					else
						continue;
				} else lapg_head = 0;
$}
				break;
			}

		} while( lapg_n.lexem != 0 );

${noterror
		if( lapg_m[lapg_head].state != @nstates-1 ) {
$}
${error
		if( lapg_m[lapg_head].state != @nstates-1 && lapg_symbols_ok >= 4 ) {
$}
$#pos0			@errorfunc(@errprefix System.String.Format( "syntax error" ) );
$#pos1			@errorfunc(@errprefix System.String.Format( "syntax error before line {0}", lapg_n.pos.line ) );
$#pos2			@errorfunc(@errprefix System.String.Format( "syntax error before line {0}, column {1}", lapg_n.pos.line, lapg_n.pos.column ) );
$#pos3			@errorfunc(@errprefix System.String.Format( "syntax error before offset {0}", lapg_n.pos.offset ) );
			return false;
		};
		return true;
	}
  }
}

