#   Automatically generated grammar

.lang        "java" 
.getsym      "chr = buff[l++];if( l == end ) fillb()"
.positioning "full"
.class       "Parser"
.namespace	 "mypackage"
.breaks		 "on"

# Vocabulary

Lid:        /[a-zA-Z_][a-zA-Z_0-9]*/	{ @ = new String(token,0,lapg_size);break; }
_skip:      /\/\/.*/
_skip:      /[\t\r\n ]+/    { continue; }
'(':		/\(/
')':		/\)/
'[':		/\[/
']':		/\]/

# Attributes

[]

# Grammar

input ::= 
	parentheses { System.out.println("[good]"); };

parentheses ::= 
	parentheses parenthesis | parenthesis ;

parenthesis ::= 
	  '(' Lid ')'				{ System.out.println( "in (): " + $1 ); }
	| '(' parentheses ')'
	| '[' Lid ']'				{ System.out.println( "in []: " + $1 ); }
	| '[' parentheses ']' ;

%%
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.text.MessageFormat;
%%

private static final boolean DEBUG_SYNTAX = true;
byte[] buff = new byte[1025];
int l, end;
InputStream input;

void fillb() {
	l = 0;
	try {
		end = input.read( buff, 0, 1024 );
		if( end == -1 )
			end = 0;
	} catch( IOException ex ) {
		end = 0;
	}
	buff[end] = 0;
}

void error( String s ) {
	System.err.println(s);
}

public static void main(String[] args) throws FileNotFoundException {
	Parser p = new Parser();
	
	if( args.length > 0 ) 
		p.input = new FileInputStream( args[0] );
	else 
		p.input = System.in;

	p.fillb();
	p.parse();
}
