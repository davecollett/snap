//
// File: @target 
// Generated from: @sourcename 
// Date: @runtime
// 
// Built by lapg: @lapgversion


@nativecode

function @classname() {
}

@classname.prototype = {
	@nativecode

	lapg_char2no: [
		@char2no
	],

	lapg_lexem: [
		@lexem
	],

	lapg_action: [
		@action
	],

${nactions
	lapg_lalr: [
		@lalr
	],
$}

	lapg_sym_goto: [
		@sym_goto
	],

	lapg_sym_from: [
		@sym_from
	],

	lapg_sym_to: [
		@sym_to
	],

	lapg_rlen: [
		@rlen
	],

	lapg_rlex: [
		@rlex
	],

	lapg_syms: [
		@syms
	],

	lapg_next: function(state, symbol) {
${nactions
		var p;
		if (this.lapg_action[state] < -2) {
			for (p = -this.lapg_action[state] - 3; this.lapg_lalr[p] >= 0; p+= 2)
				if (this.lapg_lalr[p] == symbol)
					break;
			return this.lapg_lalr[p+1];
		}
$}
		return this.lapg_action[state];
	},

	lapg_state_sym: function(state, symbol) {
		var min = this.lapg_sym_goto[symbol], max = this.lapg_sym_goto[symbol+1]-1;
		var i, e;

		while (min <= max) {
			e = (min + max) >> 1;
			i = this.lapg_sym_from[e];
			if (i == state)
				return this.lapg_sym_to[e];
			else if (i < state)
				min = e + 1;
			else
				max = e - 1;
		}
		return -1;
	},
${pos

	setPos: function(dest, src, prop) {
		dest = dest[prop] = {};
		dest.line = src.line;
$#pos2		dest.column = src.column;
$#pos3		dest.offset = src.offset;
	},
$}

	@parsefunc: function(@parseargs) {
                @nativecode
		var token;
		var lapg_head = 0, group = 0, lapg_i, chr;
		var lapg_m = new Array(@maxstack);
		var lapg_n = {};
$#pos		var lapg_current = {};
$#error		var lapg_symbols_ok = 4;

$#pos1		lapg_current.line = 1;
$#pos2		lapg_current.line = lapg_current.column = 1;
$#pos3		lapg_current.offset = 0;
$#pos3		lapg_current.line = 1;
		lapg_m[0] = {state: 0}; lapg_n.lexem = lapg_n.state = 0;
		@next;

		do {
$#pos			this.setPos(lapg_n, lapg_current, "pos");
			for (lapg_i = group, token=""; lapg_i >= 0;) {
				if( chr == "" )
					chr = null;
				if (token.length < @maxtoken-1 && chr != null)
					token += chr;
				lapg_i = this.lapg_lexem[lapg_i][this.lapg_char2no[chr!=null?chr.charCodeAt(0):0]];
				if (lapg_i >= -1 && chr!=null) { 
$#pos1					if (chr == "\n") lapg_current.line++;
$#pos2					lapg_current.column++;
$#pos2					if (chr == "\n") { lapg_current.column = 1; lapg_current.line++; }
$#pos3					lapg_current.offset++;
$#pos3					if( chr == "\n" ) lapg_current.line++;
					@next;
				}
			}
$#lexemend			this.setPos(lapg_n, lapg_current, "endpos");


			if (lapg_i == -1) {
$#pos0				@errorfunc(@errprefix "invalid lexem: `"+token+"`, skipped");
$#pos1				@errorfunc(@errprefix "invalid lexem at line "+lapg_n.pos.line+": `"+token+"`, skipped");
$#pos2				@errorfunc(@errprefix "invalid lexem at line "+lapg_n.pos.line+", column "+lapg_n.pos.column+": `"+token+"`, skipped");
$#pos3				@errorfunc(@errprefix "invalid lexem at offset "+lapg_n.pos.offset+": `"+token+"`, skipped");
				continue;
			}

			token = token.substr(0, token.length-1);
			lapg_n.lexem = -lapg_i-2;
			lapg_n.sym = null;

${lexemactions
			switch (lapg_n.lexem) {
${eachlexem
				case @lexemnum: {
					@lexemaction
					break;
				}
$}
			}
$}

$#error			skip_symbols:
			do {
				lapg_i = this.lapg_next(lapg_m[lapg_head].state, lapg_n.lexem);

				if (lapg_i >= 0) {
					var lapg_gg = {};
					lapg_gg.sym = this.lapg_rlen[lapg_i]?lapg_m[lapg_head+1-this.lapg_rlen[lapg_i]].sym : null;
					lapg_gg.lexem = this.lapg_rlex[lapg_i];
					lapg_gg.state = 0;
					if (this.DEBUG_syntax)
						dump("reduce to "+this.lapg_syms[this.lapg_rlex[lapg_i]]);
					
$#pos					this.setPos(lapg_gg, this.lapg_rlen[lapg_i] ? lapg_m[lapg_head+1-this.lapg_rlen[lapg_i]].pos : lapg_n.pos, "pos");
$#lexemend					this.setPos(lapg_gg, this.lapg_rlen[lapg_i] ? lapg_m[lapg_head].endpos : lapg_n.pos, "endpos" );
${ruleactions
					switch (lapg_i) {
${eachaction
						case @rulenum: {
							@ruleaction
						} break;
$}
					}
$}
					lapg_head-= this.lapg_rlen[lapg_i];
					lapg_m[++lapg_head] = lapg_gg;
					lapg_m[lapg_head].state = this.lapg_state_sym(lapg_m[lapg_head-1].state, lapg_gg.lexem );
				} else if (lapg_i == -1) {
					lapg_m[++lapg_head] = {};
					lapg_m[lapg_head].sym = lapg_n.sym;
					lapg_m[lapg_head].lexem = lapg_n.lexem;
$#pos					this.setPos(lapg_m[lapg_head], lapg_n.pos, "pos");
$#lexemend					this.setPos(lapg_m[lapg_head], lapg_n.endpos, "endpos");
					lapg_m[lapg_head].state = this.lapg_state_sym(lapg_m[lapg_head-1].state, lapg_n.lexem);
$#error					lapg_symbols_ok++;
					if (this.DEBUG_syntax)
						dump( "shift: "+this.lapg_syms[lapg_n.lexem]+" ("+token+")");
				}

			} while (lapg_i >= 0 && lapg_m[lapg_head].state != -1);

			if ((lapg_i == -2 || lapg_m[lapg_head].state == -1) && lapg_n.lexem != 0) {
${error				
				while (lapg_head >= 0 && this.lapg_state_sym(lapg_m[lapg_head].state, @error) == -1) {
					lapg_m[lapg_head].sym = null;
					lapg_head--;
				}
				if (lapg_head >= 0) {
					lapg_head++;
					if (!lapg_m[lapg_head])
						lapg_m[lapg_head] = {};
					lapg_m[lapg_head].lexem = @error;
					lapg_m[lapg_head].sym = null;
					lapg_m[lapg_head].state = this.lapg_state_sym(lapg_m[lapg_head-1].state, @error);
$#pos					this.setPos(lapg_m[lapg_head], lapg_n.pos, "pos");
					if (lapg_symbols_ok >= 4)
$#pos0						@errorfunc(@errprefix "syntax error");
$#pos1						@errorfunc(@errprefix "syntax error before line "+lapg_n.pos.line);
$#pos2						@errorfunc(@errprefix "syntax error before line "+lapg_n.pos.line+", column "+lapg_n.pos.column);
$#pos3						@errorfunc(@errprefix "syntax error before offset "+lapg_n.pos.offset);
					lapg_i = lapg_symbols_ok;
					lapg_symbols_ok = 0;
					if (lapg_i > 1)
						goto skip_symbols;
					else
						continue;
				} else lapg_head = 0;
$}
				break;
			}

		} while (lapg_n.lexem);

${noterror
		if (lapg_m[lapg_head].state != @nstates-1) {
$}
${error
		if (lapg_m[lapg_head].state != @nstates-1 && lapg_symbols_ok >= 4) {
$}
$#pos0			@errorfunc(@errprefix "syntax error");
$#pos1			@errorfunc(@errprefix "syntax error before line "+lapg_n.pos.line);
$#pos2			@errorfunc(@errprefix "syntax error before line "+lapg_n.pos.line+", column "+lapg_n.pos.column);
$#pos3			@errorfunc(@errprefix "syntax error before offset "+lapg_n.pos.offset);
			return false;
		};
		return true;
	}
}
