//
// File: @target 
// Generated from: @sourcename 
// Date: @runtime
// 
// Built by lapg: @lapgversion


@nativecode
${pos
struct lapg_place {
$#pos1	int line;
$#pos2	int line, column;
$#pos3	int line, offset;
};
$}

struct lapg_symbol {
	void *sym;
	int  lexem, state;
$#pos	struct lapg_place pos;
$#lexemend	struct lapg_place endpos;
};

static const char lapg_char2no[256] = {
@char2no
};

static const short lapg_lexem[@lstates][@lchars] = {
@lexem
};

static const int lapg_action[@nstates] = {
@action
};

${nactions
static const short lapg_lalr[@nactions] = {
@lalr
};
$}

static const short lapg_sym_goto[@nsyms+1] = {
@sym_goto
};

static const short lapg_sym_from[@gotosize] = {
@sym_from
};

static const short lapg_sym_to[@gotosize] = {
@sym_to
};

static const short lapg_rlen[@rules] = {
@rlen
};

static const short lapg_rlex[@rules] = {
@rlex
};

#ifdef DEBUG_syntax
static const char *lapg_syms[] = {
@syms
};
#endif

static inline int lapg_next( int state, int symbol )
{
${nactions
	if( lapg_action[state] < -2 ) {
		const short *p = lapg_lalr - lapg_action[state] - 3;
		for( ;*p >= 0; p += 2 )
			if( *p == symbol ) break;
		return p[1];
	}
$}
	return lapg_action[state];
}

static inline int lapg_state_sym( int state, int symbol )
{
	int min = lapg_sym_goto[symbol], max = lapg_sym_goto[symbol+1]-1;
	int i, e;

	while( min <= max ) {
		e = (min + max) >> 1;
		i = lapg_sym_from[e];
		if( i == state )
			return lapg_sym_to[e];
		else if( i < state )
			min = e + 1;
		else
			max = e - 1;
	}
	return -1;
}

int @classname::@parsefunc(@parseargs)
{
        @nativecode
	char *token = new char[@maxtoken];
	int  lapg_head = 0, group = 0, lapg_i, lapg_size, chr;
	lapg_symbol *lapg_m = new lapg_symbol[@maxstack];
	lapg_symbol lapg_n = { NULL, -1, 0 };
$#pos3	lapg_place lapg_current = { 1, 0 };
$#pos2	lapg_place lapg_current = { 1, 1 };
$#pos1	lapg_place lapg_current = { 1 };

$#error    int lapg_symbols_ok = 4;
	lapg_m[0].state = 0;
	@next;

	do {
$#pos		lapg_n.pos = lapg_current;
		for( lapg_size = 0, lapg_i = group; lapg_i >= 0; ) {
			if( lapg_size < @maxtoken-1 ) token[lapg_size++] = chr;
			lapg_i = lapg_lexem[lapg_i][(int)lapg_char2no[chr]];
			if( lapg_i >= -1 && chr ) { 
$#pos1				if( chr == '\n' ) lapg_current.line++;
$#pos2				lapg_current.column++;
$#pos2				if( chr == '\n' ) lapg_current.column = 1, lapg_current.line++;
$#pos3				lapg_current.offset++;
$#pos3				if( chr == '\n' ) lapg_current.line++;
				@next;
			}
		}
$#lexemend		lapg_n.endpos = lapg_current;
		token[lapg_size] = 0;

		if( lapg_i == -1 ) {
$#pos0			@errorfunc( @errprefix"invalid lexem: `%s`, skipped\n", token );
$#pos1			@errorfunc( @errprefix"invalid lexem at line %i: `%s`, skipped\n", lapg_n.pos.line, token );
$#pos2			@errorfunc( @errprefix"invalid lexem at line %i, column %i: `%s`, skipped\n", lapg_n.pos.line, lapg_n.pos.column, token );
$#pos3			@errorfunc( @errprefix"invalid lexem at offset %i: `%s`, skipped\n", lapg_n.pos.offset, token );
			continue;
		}

		token[lapg_size-1] = 0;
		lapg_n.lexem = -lapg_i-2;
		lapg_n.sym = NULL;
${lexemactions
		switch( lapg_n.lexem ) {
${eachlexem
			case @lexemnum: {
				@lexemactioncpp
			} break;
$}
		}
$}

$#error		skip_symbols:
		do {
			lapg_i = lapg_next( lapg_m[lapg_head].state, lapg_n.lexem );

			if( lapg_i >= 0 ) {
				lapg_symbol lapg_gg={(lapg_rlen[lapg_i])?lapg_m[lapg_head+1-lapg_rlen[lapg_i]].sym:NULL,lapg_rlex[lapg_i],0 };
				#ifdef DEBUG_syntax
					fprintf( stdout, "reduce to %s\n", lapg_syms[lapg_rlex[lapg_i]] );
				#endif
$#pos				lapg_gg.pos = (lapg_rlen[lapg_i])?lapg_m[lapg_head+1-lapg_rlen[lapg_i]].pos:lapg_n.pos;
$#lexemend				lapg_gg.endpos = (lapg_rlen[lapg_i])?lapg_m[lapg_head].endpos:lapg_n.pos;
${ruleactions
				switch( lapg_i ) {
${eachaction
					case @rulenum: {
						@ruleactioncpp
					} break;
$}
				}
$}
				lapg_head -= lapg_rlen[lapg_i];
				lapg_m[++lapg_head] = lapg_gg;
				lapg_m[lapg_head].state = lapg_state_sym( lapg_m[lapg_head-1].state, lapg_gg.lexem );
			} else if( lapg_i == -1 ) {
				lapg_m[++lapg_head] = lapg_n;
				lapg_m[lapg_head].state = lapg_state_sym( lapg_m[lapg_head-1].state, lapg_n.lexem );
$#error				lapg_symbols_ok++;
				#ifdef DEBUG_syntax
					fprintf( stdout, "shift: %s (%s)\n", lapg_syms[lapg_n.lexem], token );
				#endif
			}

		} while( lapg_i >= 0 && lapg_m[lapg_head].state != -1 );

		if( (lapg_i == -2 || lapg_m[lapg_head].state == -1) && lapg_n.lexem != 0 ) {
${error
			while( lapg_head >= 0 && lapg_state_sym( lapg_m[lapg_head].state, @error ) == -1 )
				lapg_head--;

			if( lapg_head >= 0 ) {
				lapg_head++;
				lapg_m[lapg_head].lexem = @error;
				lapg_m[lapg_head].sym = NULL;
				lapg_m[lapg_head].state = lapg_state_sym( lapg_m[lapg_head-1].state, @error );
$#pos				lapg_m[lapg_head].pos = lapg_n.pos;
				if( lapg_symbols_ok >= 4 )
$#pos0					@errorfunc( @errprefix"syntax error\n" );
$#pos1					@errorfunc( @errprefix"syntax error before line %i\n", lapg_n.pos.line );
$#pos2					@errorfunc( @errprefix"syntax error before line %i, column %i\n", lapg_n.pos.line, lapg_n.pos.column );
$#pos3					@errorfunc( @errprefix"syntax error before offset %i\n", lapg_n.pos.offset );
				lapg_i = lapg_symbols_ok;
				lapg_symbols_ok = 0;
				if( lapg_i > 1 )
					goto skip_symbols;
				else
					continue;
			} else lapg_head = 0;
$}
			break;
		}

	} while( lapg_n.lexem );

	if( lapg_m[lapg_head].state == @nstates-1 ) lapg_i = 1; else lapg_i = 0;
	delete[] lapg_m;
	delete[] token;

${noterror
$#pos0	if( !lapg_i ) @errorfunc( @errprefix"syntax error\n" );
$#pos1	if( !lapg_i ) @errorfunc( @errprefix"syntax error before line %i\n", lapg_n.pos.line );
$#pos2	if( !lapg_i ) @errorfunc( @errprefix"syntax error before line %i, column %i\n", lapg_n.pos.line, lapg_n.pos.column );
$#pos3	if( !lapg_i ) @errorfunc( @errprefix"syntax error before offset %i\n", lapg_n.pos.offset );
$}
${error
$#pos0	if( !lapg_i && lapg_symbols_ok >= 4 ) @errorfunc( @errprefix"syntax error\n" );
$#pos1	if( !lapg_i && lapg_symbols_ok >= 4 ) @errorfunc( @errprefix"syntax error before line %i\n", lapg_n.pos.line );
$#pos2	if( !lapg_i && lapg_symbols_ok >= 4 ) @errorfunc( @errprefix"syntax error before line %i, column %i\n", lapg_n.pos.line, lapg_n.pos.column );
$#pos3	if( !lapg_i && lapg_symbols_ok >= 4 ) @errorfunc( @errprefix"syntax error before offset %i\n", lapg_n.pos.offset );
$}
	return lapg_i;
}


@nativecode
