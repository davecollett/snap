##################################################
# Dialog test

menu_item "Te&st|&Dialog test" "See if we can create a dialog"
actions
   TestDialog()
end_menu_item

function TestDialog()
   clearlog()
   $textvar = "input text"
   $textvar4 = "Some readonly text"
   $dropdownlist = "~dd1~Drop down 1~dd2~Drop down 2~dd3~Drop down 3"
   $listboxlist = "~Value1~Value2~Value3~Value4~Value5~Longer value 6~last value" 
     
   dialog "Test dialog"
   label "&This is the label"
   textbox $textvar "Enter some text"
   textbox $textvar2 "Only enter abcd" "::~abcd"
   validator
     if $textvar2 != 'abcd' then
       Message("You should have entered abcd!","oops")
       return false
     endif
     return true
      
   textbox $textvar3 "Match regexp ^(a[0-9]frog)?\$" "::~~^(a[0-9]frog)?\$~You didn't match it!"
   textbox $textvar4 "Readonly" "::readonly"
   textbox $textvar5 "Multiline" "50:5"
   
   spacer
   checkbox $checkvar "&Checkbox label"
   checkbox $checkvar "Checkbox2 label"
   dropdown_selector $coordsys "Coordinate system" $coordsys_list
   button "Button 1"
      if( ask("Do you want to quit?","Quit") ) then exit endif
   button "Button 2"
      $textvar = $textvar3
   new_column
   radio_selector $radiovar "Radio selector" "|val1|Value 1|val2|Value 2"
   dropdown_selector $dropdownvar "&Dropdown Selector" $dropdownlist
   button "Add item to list"
       $dropdownlist = $dropdownlist."~ano~another"
   open_file_selector $openvar "&Open a file" "Snap job files (*.snp)|*.snp|All files (*.*)|*.*" "You must enter an input file"
   validator
     if not FileExists($openvar) then
        message("The selected file $openvar doesn't exist - try again!","File error")
        return false
     endif
     return true
     
   save_file_selector $savevar "Save a file" "Listing files (*.lst)|*.lst|All files (*.*)|*.*"
   validator
     if FileExists($savevar) then
        return Ask("File $savevar already exists\nDo you want to overwrite it?","Overwrite file")
     endif
     return true
   new_column
   listbox $lb1 "Single list box" $listboxlist 
   listbox $lb2 "Multiple select" $listboxlist "multiple"
   button "Add item to list"
       $listboxlist = $listboxlist."~another"
   end_dialog
   
   log("text_var = $textvar")
   log("radio var = $radiovar")
   log("check var = $checkvar")
   log("coordsys = $coordsys")
   log("dropdown var = $dropdownvar")
   log("open var = $openvar")
   log("save var = $savevar")
   log("checkbox var = $checkvar")
   log("listbox 1 var = $lb1")
   log("listbox 2 var = $lb2")
end_function

################################################################
# String tests

menu_item "Te&st|&String test" "Test string interpolation"
actions
   TestStrings()
end_menu_item

function TestStrings()
   clearlog()
   log("#####################\nstring tests")
   $var1 = "a variable"
   $var2 = 1234
   log("Editor is $_editor")
   log("Can include $var1 and a number $var2 in a string")
   log("Can include $var1$ in a string")
   log("Can include $var1$$var1 in a string twice")
   log("Can continue $var1$continued at the end")
   log("Can continue $var1\n followed by escaped newline\n at the end")
   log(
"Can have long \"quote containing\"
strings going on for many
lines, until the quote is
closed
#And even comments
"
)
   log( testfunc("test","Param 1 was test") )
   log( testfunc("test2","Param 1 was not test") )

   log( "string 1 " . "concatenated with string2")

   log( 'Uninterpolated string test\r\n $variable etc' )
   log( 'Simple numeric string: '.123465789000)
   
   log( 'String matches test = ' . match('abcdddefg','[cde]+'))
   log( 'String matches test = ' . match('abcdddefg','[cDe]+'))
   
   log( 'Replacing '. replace('abcdddedfg','d+','D'))
   log( 'Replacing '. replace('abcdddedfg','d+','D',1))
   
   log( 'Date functions - '.GetDate() )
   log( 'Date functions - '.GetDate('%Y%m%d') )
   
   log( 'GetEnv function USERNAME - '.GetEnv('USERNAME') )
   log( 'GetEnv function NONEXISTENT_VARIABLE - '.GetEnv('NONEXISTENT_VARIABLE') )
   
   $testvar = "Test variable correct"
   log( 'GetValue of $testvar = '.GetValue('$testvar') )
   $varname = '$user_script_path'
   log( "GetValue of \"$varname\" = ".GetValue($varname) )
   
   log( "#####################")
   log( "Logical operation tests")
   
   $t = true
   $f = false
   log( $t and "Value")
   log( $t or "Value")
   log( $f and "Value")
   log( $f or "Value")
end_function

########################################

menu_item "Te&st|&Run script" "Run test script"
actions
clearlog()
RunScript("testscript.txt",$script_file)         
end_menu_item

function testfunc( $param1, $param2 )
if $param1 == "test" then return "\$param1 was test" endif
return $param2
end_function      

#############################################
# Testing function returns 

menu_item "Te&st|&Crash|ok" "test script exit"
actions
clearlog()
test_script_exit("ok")
end_menu_item

menu_item "Te&st|&Crash|exit" "test script exit"
actions
clearlog()
test_script_exit("exit")
end_menu_item

menu_item "Te&st|&Crash|return" "test script exit"
actions
clearlog()
test_script_exit("return")
end_menu_item

menu_item "Te&st|&Crash|crash" "test script exit"
actions
clearlog()
test_script_exit("crash")
end_menu_item

menu_item "Te&st|&Crash|func_exit" "test script exit"
actions
clearlog()
test_script_exit("func_exit")
end_menu_item

menu_item "Te&st|&Crash|func_return" "test script exit"
actions
clearlog()
test_script_exit("func_return")
end_menu_item

menu_item "Te&st|&Crash|func_crash" "test script exit"
actions
clearlog()
test_script_exit("func_crash")
end_menu_item

function test_script_exit($crash)
clearlog()
$_crash = $crash
log("Starting testcrash script")
$crashscript=Filename("testcrash.txt","absolute",Filename($script_file,"path"))
log("Script located at: $crashscript")
RunScript($crashscript)
log("Returned from testcrash script")
end_function

menu_item "Te&st|&Crash|dialog returns" "Exit conditions in dialog functions"
actions
  TestDialogExits()
end_menu_item

function TestDialogExits()
  clearlog()
  log("Running dialog")
  dialog "Test" $result
  button "Test loop"
     while true do log("In while") break log("Error: Still in while?") endwhile log("Out of while")
  button "Test return"
     return true
     log("Error: passed return")
  button "Test exit"
     exit
     log("Error: passed exit")
  button "Test crash"
     non_existent_function("die")
     log("Error: passed nonexistent function")
  radio_selector 
     $valexit 
     "Validator option" 
     "|ok|Pass validator|return|Return true in validator|exit|Exit in validator|crash|Crash in validator"
  validator
     if $valexit == "return" then
        return true
     elseif $valexit == "exit" then
        exit
     elseif $valexit == "crash" then
        non_existent_function("die")
     endif
     return true
 end_dialog
 log("Still running after dialog")
 log("Dialog status = $result")
end_function
  
     
###################################################
# Config tests

menu_item "Te&st|C&onfiguration" "get/set config"
actions
clearlog()
$var1 = GetConfig("Var1")
$var2 = GetConfig("Var2")
dialog "Config test" $result
textbox $var1 "Config var1"
textbox $var2 "Config var2"
end_dialog

if $result then 
  SetConfig("Var1",$var1)
  SetConfig("Var2",$var2)
endif

end_menu_item

###################################################
# System variables

menu_item "Te&st|System &Variables" "System variables"
actions
clearlog()
log("\$job_valid = $job_valid")
log("\$job_file = $job_file")
log("\$job_path = $job_path")
log("\$job_title = $job_title")
log("\$coordinate_file = $coordinate_file")
log("\$data_files = $data_files")
log("\$load_errors = $load_errors")
log("\$snap_path = $snap_path")
log("\$user_script_path = $user_script_path")
log("\$system_script_path = $system_script_path")
log("\$user_config_path = $user_config_path")
log("\$system_config_path = $system_config_path")
log("\$coordsys_list = $coordsys_list")
$snap_path = "garbage"
end_menu_item

menu_item "Te&st|&Environment Variables" "Environment variables"
actions
clearlog()
log("\nPATH = ".GetEnv('PATH'))
log("\nPERL5LIB = ".GetEnv('PERL5LIB'))
log("\nSNAPDIR = ".GetEnv('SNAPDIR'))
end_menu_item

####################################################
# File system functions

menu_item "Te&st|&File functions" "file functions"
actions
clearlog()
   $file = TempFile()
   log("Creating temporary file $file")
   WriteFile( $file,
"This is a temporary file:
Filename: $file
This should not exist once the program has finished.
This should be followed by appended text
")

   AppendFile($file,
"This text is appended
")

   $string = ReadFile($file)
   log($string)
 
   $file2 = TempFile()
   DeleteFile($file2)
   AppendFile($file2,"This file has been created with AppendFile")
   log("File exists of file $file2 created by AppendFile gives ".FileExists($file2))

   $copyfile = $file.".copy"
   $renamefile = $file.".rename"
   DeleteFile($copyfile)
   DeleteFile($renamefile)

   log("Copying file to $copyfile")
   log("Before copy file_exists $copyfile gives ".FileExists($copyfile))
   CopyFile($file,$copyfile)
   log("After copy file_exists $copyfile gives ".FileExists($copyfile))
   log("Renaming copy to $renamefile")
   log("Before rename file_exists $renamefile rename gives ".FileExists($renamefile))
   RenameFile($copyfile,$renamefile)
   log("After rename file_exists $copyfile gives ".FileExists($copyfile))
   log("After rename file_exists $renamefile gives ".FileExists($renamefile))
   log("Deleting renamed file")
   DeleteFile($renamefile)
   log("After delete file_exists $renamefile gives ".FileExists($renamefile))
   DeleteFile($renamefile)

   log("==================================================")
   log("Filename functions")
   $filename = "test/thing.txt"
   log( "\$filename = $filename")
   log( "path = ".Filename($filename,'path'))
   log( "directory = ".Filename($filename,'directory'))
   log( "name = ".Filename($filename,'name'))
   log( "fullname = ".Filename($filename,'fullname'))
   log( "extension = ".Filename($filename,'extension'))
   log( "absolute = ".Filename($filename,'absolute'))
   log( "absolute to c:\\test = ".Filename($filename,'absolute','c:\test'))
   $filename2 = Filename($filename,'absolute')
   log( "relative = ".Filename($filename2,'relative'))
   log( "relative to c:\\test = ".Filename($filename2,'relative','c:\test'))

   log("===================================================")
   log("***Dir *.* gives")
   log( directory("","*.*") )
   log("***Dir snap_path gives")
   log( directory($snap_path) )
   log("***Scripts text files gives")
   log( directory($snap_path."/scripts","*.txt") )


end_menu_item
####################################################
# Stack overflow test

menu_item "Te&st|Stac&k overflow" "Stack overflow"
actions
clearlog()
stack_overflow()
end_menu_item

function stack_overflow()
  log("Calling stack_overflow")
  stack_overflow()
end_function

######################################################
#

menu_item "Te&st|&RunLog" "Logged run"
actions
clearlog()
$result = logrun("xcopy /?")
log("copy /? output is:\n$result")
$result = logrun("nonexistentprogram")
log("nonexistent output is:\n$result")
end_menu_item

######################################################
# 
menu_item "Te&st|&Dialog functions" "Dialog functions"
actions
clearlog()
$result = Message("Hey you, do you want to continue?","Carry on snapping")
log("\$result = $result")
$result = Ask("Hey you, do you want to continue?","Carry on snapping")
log("\$result = $result")
$result = GetOpenFileName("Pick a file","Listing file|*.lst|All file|*.*")
log("\$result = $result")
$result = GetOpenFileName("Pick many open files","Listing file|*.lst|All file|*.*", true)
log("\$result = $result")
$result = GetSaveFileName("Pick a save file","Listing file|*.lst|All file|*.*")
log("\$result = $result")
end_menu_item

#######################################################
#
menu_item "Te&st|&Loop tests" "Loop tests"
actions
   TestLoops()
end_menu_item

function TestLoops()
clearlog()
$test = "a"
while $test != "aaaaaaaa" do
   log("In while loop \$test = $test" )
  $test = $test . "a"
endwhile

log("==================================")
log("With break")
$test = "a"
while $test != "aaaaaaaa" do
   log("In while loop \$test = $test" )
   if $test == "aaaa" then break endif
  $test = $test . "a"
endwhile

log("==================================")
log("With break and continue")
$test = "a"

while true do
   log("In while loop \$test = $test" )
   if Match($test,".{20}") then break endif
   $test = $test."a"
   if Match($test,".{8}") then continue endif
   $test = $test."b"
endwhile

$max_while_loop_iterations = "3"
log("==================================")
log("With max while loop iterations set to 3")
$test = "a"
while $test != "aaaaaaaa" do
   log("In while loop \$test = $test" )
  $test = $test . "a"
endwhile

log("==================================")
log("Foreach loop")
$test = "part1\npart2\n\npart3"
foreach $part in $test do
  log("In foreach \$part = $part")
endforeach

log("==================================")
log("Foreach loop with delimited")
$test = "part1\npart2\n\npart3"
foreach $part in $test delimited_by "ar" do
  log("In foreach \$part = $part")
endforeach


log("==================================")
log("Foreach loop with delimited and grouping")
$test = "part1\npart2\n\npart3"
foreach $part in $test delimited_by "(ar)" do
  log("In foreach \$part = $part")
endforeach


log("==================================")
log("Foreach loop with matches")
$test = "part1\npart2\n\npart3"
foreach $part in $test matches "ar" do
  log("In foreach \$part = $part")
endforeach

log("==================================")
log("Foreach loop with matches and grouping")
$test = "part1\npart2\n\npart3"
foreach $part in $test matches "(a)(r)" do
  log("In foreach \$part = $part")
endforeach

log("==================================")
log("Foreach loop with break and continue")
$test = "hello\ncontinue\nworld\nbreak\ngoodbye"
foreach $part in $test do
  if $part == "continue" then continue endif
  if $part == "break" then break endif
  log("In foreach \$part = $part")
endforeach

log("==================================")
log("Foreach loop with multiple expressions")
$test = "hello\nworld\netc\n"
$test2 = "hello again"
$test3 = "bye now"
foreach $part in $test,$test2,$test3 do
  log("In foreach \$part = $part")
endforeach

log("==================================")
log("Foreach loop with multiple expressions and delimiter")
$i=1
foreach $part in $test,$test2,$test3 delimited_by "\\n" do
  log("In foreach \$part$i = $part")
  $i=$i+1
endforeach

end_function


menu_item "Te&st|&Comparisons" "Test comparison functions"
actions
   TestComparison()
end_menu_item

function TestComparison()
   clearlog()
   log("\nTesting comparisons")
   $a="abcd"
   $b="BCDE"
   $c="cdef"
   $d="-1ab"
   $e="-2ab"
   $f="23oops"
   $g="230ps"
   $h="24"
   $i="230x"
   log("\"$a\"<\"$b\"=".($a<$b))
   log("\"$a\">\"$b\"=".($a>$b))
   log("\"$a\">\"$a\"=".($a>$a))
   log("\"$a\">=\"$a\"=".($a>=$a))
   log("\"$a\"==\"$a\"=".($a==$a))

   log("\"$a\"<\"$c\"=".($a<$c))
   log("\"$b\"<\"$c\"=".($b<$c))


   log("\"$d\"<\"$e\"=".($d<$e))
   log("\"$e\"<\"$f\"=".($e<$f))
   log("\"$f\"<\"$g\"=".($f<$g))
   log("\"$f\"<\"$h\"=".($f<$h))
   log("\"$g\"<\"$h\"=".($g<$h))
end_function

menu_item "Te&st|&Loop multiple variable assignments" "Multiple variable tests"
actions
   TestMultiple()
end_menu_item

function minmax( $a, $b )
  if $a < $b then return $a, $b else return $b, $a endif
end_function

function TestMultiple()
  clearlog()
  log("\nMultiple test\n")
  $a,$b=1,2,3
  $c,$d=$b
  log("\$a=$a")
  log("\$b=$b")
  log("\$c=$c")
  log("\$d=$d")
  $d,$e=minmax(5,7)
  log("\$d=$d < \$e=$e")
  $d,$e=minmax(8,3)
  log("\$d=$d < \$e=$e")
end_function

menu_item "Te&st|&Dynamic menus" "Dynamic menus"
actions
   TestSubMenus()
end_menu_item

function TestSubMenus()
   menu_item "Te&st|&Submenu|LogHello" "Dynamic submenus"
   actions
      Log("Hello from LogHello menu")
   end_menu_item
   menu_item "Te&st|&Submenu|Add LogHello3" "Dynamic submenus 2"
   actions
      menu_item "Te&st|&Submenu|LogHello3" "Say hello again"
      actions
      	Log("Hello from LogHello3 menu")
      end_menu_item
   end_menu_item
   menu_item "Te&st|&Submenu|Remove LogHello3" "Dynamic submenus 3"
   actions
      DeleteMenu("Te&st|&Submenu|LogHello3")
   end_menu_item
   menu_item "Te&st|&Submenu|Remove Submenu" "Dynamic submenus 4"
   actions
      DeleteMenu("Te&st|&Submenu")
   end_menu_item
   menu_item "Te&st|&Submenu|Remove Submenu contents" "Dynamic submenus 5"
   actions
      DeleteMenu("Te&st|&Submenu|")
   end_menu_item
   menu_item "Te&st|&Submenu|&Subsubmenu|Hello4" "Dynamic submenus 6"
   actions
      Log("Hello 4")
   end_menu_item
   
end_function

