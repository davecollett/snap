#   Snap_manager script grammar
 
.maxtoken    4096
.class       "ScriptImp"
.getsym      "chr = getchar();"
#.errorrpefix
.positioning "full"


# identificators
Lfuncid (Token *):          /[a-zA-Z_][a-zA-Z_0-9]*/ -1 { @ = new IdToken(this,token); }
Lvariable (Token *): /\$[a-zA-Z0-9_]*/ -1 { @ = this->GetVariable( token ); }
# $$ = xxx.lexem
# $Lfuncid is null
# $0 is zero
# $@ is xxx.pos
# @ is *(type *) xxx.sym

# Strings
#
#  Characters, \n \r \t \" \$  $(varname)
#
#  Could have built the $(varname) and \x bits as part of grammar, but that means
#  having to handle spaces, which means they get into all the other rules too... pain

Lstring (Token *):      /"([^"\\]|\\(.|\n))*"/ { @ = this->InterpolateString(token); }
Lstringquot (Token *):      /'([^'])*'/ { @ = this->InterpolateString(token); }
Lstringint (Token *):   /[0-9]+/ { @ = new StringToken(this,token); }

# Comment

_skip:      /\#[^\r\n]*/
_skip:      /[ \t\r\n]+/   \ continue;

# keywords

#  if .. then ... else_if ... else ... endif

Kif: /if/
Kthen: /then/
Kelseif: /elseif/
Kelse: /else/
Kendif: /endif/

# while  ... do ... endwhile
# foreach .. in .. delimited_by .. do .. endforeach

Kwhile: /while/
Kdo: /do/
Kendwhile: /endwhile/
Kforeach: /foreach/
Kin: /in/
Kdelimited_by: /delimited_by/
Kmatches: /matches/
Kendforeach: /endforeach/

# Logical operators 

Kand: /and/
Kor: /or/
Knot: /not/

# Boolean constants

Ktrue (Token *): /true/  { @ = new BooleanToken( this, true ) ; }
Kfalse (Token *): /false/ { @ = new BooleanToken( this, false ); }

# menu definition

Kmenu_item: /menu_item/
Krequirements: /requirements/
Kactions: /actions/
Kend_menu_item: /end_menu_item/

# function declaration 

Kfunction: /function/
Kend_function: /end_function/

# Dialog box components

Kdialog: /dialog/
Kend_dialog: /end_dialog/
Klabel: /label/
Ktextbox: /textbox/
Klistbox: /listbox/
Kdropdown_selector: /dropdown_selector/
Kradio_selector: /radio_selector/
Kopen_file_selector: /open_file_selector/
Ksave_file_selector: /save_file_selector/
Kcheckbox: /checkbox/
Kbutton: /button/
Kvalidator: /validator/
Kspacer: /spacer/
Knew_column: /new_column/
Knew_row: /new_row/

# exit

Kcontinue: /continue/
Kbreak: /break/
Kreturn: /return/
Kexit: /exit/

'(': /\(/
')': /\)/
',': /\,/
'=': /\=/
'.': /\./
'==': /\=\=/
'!=': /\!\=/
'<': /\</
'>': /\>/
'<=': /\<\=/
'>=': /\>\=/
'+': /\+/
'-': /\-/
'*': /\*/
'/': /\//

# Attributes

[]

##################################################################################
# A.2.1  Expressions

input ::
   = script { program = static_cast<Token *>($script); }
;

script ::
   = function_definition { $$ = new StatementBlockToken( this, 0 ); }
   = script function_definition { $$ = $0; }

   = statement { $$ = new StatementBlockToken( this, PTK($statement) ); }
   = script statement { $$ = $0; (static_cast<StatementBlockToken *>($$))->AddStatements(PTK($1)); }
;
   
statement_block ::
   = statement { $$ = new StatementBlockToken( this, PTK($statement) ); }
   = statement_block statement { $$ = $0; (static_cast<StatementBlockToken *>($$))->AddStatements(PTK($1)); }
;

statement ::
   = function { $$ = $0; }
   = dialog { $$ = $0; }
   = menu_item { $$ = $0; }

   = conditional_statement { $$ = $0; }
   = while_statement { $$ = $0; }
   = foreach_statement { $$ = $0; }
   = assignment_statement { $$ = $0; }
   = exit_statement { $$ = $0; }
;

assignment_statement ::
   = variable_list '=' expression 
   { $$ = new AssignmentToken( this, PTK($variable_list), PTK($expression) ); }
;

exit_statement ::
   = Kcontinue
   { $$ = new ExitToken(this,elLoopInner);}
   = Kbreak
   { $$ = new ExitToken(this,elLoop);}
   = Kreturn expression
   { $$ = new ExitToken(this,elReturn,PTK($expression)); }
   = Kexit 
   { $$ = new ExitToken(this,elExit); }
;

######################################################################################
# Function definitions and implementation

function_definition ::
   = Kfunction function_name formal_parameters statement_block Kend_function 
     { AddFunction(new FunctionDef( this, FUNCID($function_name), PTK($formal_parameters), PTK($statement_block) )); $$ = 0; }
;
   
function ::
   = function_name parameters
   { $$ = new FunctionToken(this, FUNCID($function_name), PTK($parameters) ); }
 ;

function_name ::
   = Lfuncid
    { $$ = $Lfuncid; }
;
   
formal_parameters ::
   = '(' variable_list ')'
   { $$ = $variable_list; }
   = '(' ')'
   {$$ = 0; }
;
   
parameters ::
   = '(' expression ')'
   { $$ = $expression; }
   = '(' ')'
   {$$ = 0; }
;
##########################################################
# Menu items

menu_item ::
   = menu_item_header menu_requirements menu_actions menu_item_footer
     { $$ = (static_cast<MenuItem *>($menu_item_header))->AddRequirements(PTK($menu_requirements))->AddActions(PTK($menu_actions));}

   = menu_item_header menu_actions menu_item_footer
     { $$ = (static_cast<MenuItem *>($menu_item_header))->AddActions(PTK($menu_actions)); }

;

# Menu item header, two strings defining the menu entry, and the status bar description

menu_item_header ::
   = Kmenu_item expression expression 
     { $$ = new MenuItem( this, PTK($1), PTK($2) ); }
;

menu_item_footer ::
   = Kend_menu_item 
;

menu_requirements ::
   = Krequirements statement_block { $$ = $statement_block; }
;   

menu_actions ::
   = Kactions statement_block { $$ = $statement_block; }
;

####################################################################################
# Dialogs

dialog ::
   = Kdialog expression variable expressionopt dialog_controls Kend_dialog 
     { $$ = new DialogToken( this,PTK($expression), PTK($dialog_controls), PTK($variable), PTK($expressionopt) ); }

   = Kdialog expression dialog_controls Kend_dialog 
     { $$ = new DialogToken( this,PTK($expression), PTK($dialog_controls), 0, 0 ); }
;
     
dialog_controls ::
   = dialog_control { $$ = $0; }
   = dialog_controls dialog_control {$$ = JOIN($0,$1); }
;
   
dialog_control ::
   = Klabel expression 
     { $$ = new DialogControlToken( this, ctLabel, PTK($expression) ); }
     
   = Ktextbox variable expression expressionopt 
     { $$ = new DialogControlToken( this, ctTextBox, PTK($2), PTK($variable), 0, PTK($3) ); }
     
   = Kdropdown_selector variable expression expression 
     { $$ = new DialogControlToken( this, ctDropDownSelector, PTK($2), PTK($variable), PTK($3) ); }
     
   = Klistbox variable expression expression expressionopt
     { $$ = new DialogControlToken( this, ctListBox, PTK($2), PTK($variable), PTK($3), PTK($4) ); }
     
   = Kradio_selector variable expression expression 
     { $$ = new DialogControlToken( this, ctRadioSelector, PTK($2), PTK($variable), PTK($3) ); }
     
   = Kcheckbox variable expression 
     { $$ = new DialogControlToken( this, ctCheckBox, PTK($2), PTK($variable) ); }
     
   = Kopen_file_selector variable expression expression expressionopt 
     { $$ = new DialogControlToken( this, ctOpenFileSelector, PTK($2), PTK($variable), PTK($3), PTK($4) ); }
     
   = Ksave_file_selector variable expression expression expressionopt 
     { $$ = new DialogControlToken( this, ctSaveFileSelector, PTK($2), PTK($variable), PTK($3), PTK($4) ); }
 
   = Kbutton expression statement_block
     { $$ = new DialogControlToken( this, ctButton, PTK($expression), 0, 0, PTK($statement_block) ); }
     
   = Kvalidator statement_block
     { $$ = new DialogControlToken( this, ctValidator, 0, 0, 0, PTK($statement_block) ); }
     
   = Kspacer 
     { $$ = new DialogControlToken( this, ctSpacer ); }
     
   = Knew_column 
     { $$ = new DialogControlToken( this, ctNewColumn ); }
	      
   = Knew_row 
     { $$ = new DialogControlToken( this, ctNewRow ); }
;


################################################################################
# Conditional blocks

conditional_statement ::

   = conditional_header 
     conditional_block 
     conditional_alternativesopt
     conditional_finalopt
     conditional_footer
     { PTK($conditional_block)->SetNext(PTK($conditional_alternativesopt))-> SetNext(PTK($conditional_finalopt));  $$ = new ConditionalStatement( this, PTK($conditional_block) ); }

;

conditional_header ::
   = Kif
;

conditional_block ::
   = expression Kthen statement_block
     { $$ = new ConditionalBranch( this, PTK($expression), PTK($statement_block) ); }
;

conditional_alternatives ::
   = Kelseif conditional_block
     { $$ = $conditional_block; }
   = conditional_alternatives Kelseif conditional_block
     { $$ = JOIN($conditional_alternatives#1,$conditional_block); }
;

conditional_final ::
   = Kelse statement_block 
     { $$ = new ConditionalBranch( this, 0, PTK($statement_block) ); }
;

conditional_footer ::
   = Kendif
;

########################################################################
# While loop

while_statement ::
   = Kwhile expression Kdo statement_block Kendwhile
   { $$ = new ConditionalBranch( this, PTK($expression), PTK($statement_block), true ); }
;

########################################################################
# Foreach statement

foreach_statement ::
   = Kforeach variable Kin expression Kdo statement_block Kendforeach
   { $$ = new ForeachToken( this, PTK($variable), PTK($expression), 0, PTK($statement_block)); }   
   = Kforeach variable Kin expression Kdelimited_by expression Kdo statement_block Kendforeach
   { $$ = new ForeachToken( this, PTK($variable), PTK($expression#0), PTK($expression#1), PTK($statement_block)); }   
   = Kforeach variable Kin expression Kmatches expression Kdo statement_block Kendforeach
   { $$ = new ForeachToken( this, PTK($variable), PTK($expression#0), PTK($expression#1), PTK($statement_block), true); }   
;


########################################################################
# List expressions

variable_list ::
   = variable
    { $$ = $variable; }
   = variable_list ',' variable
    { $$ = JOIN($variable_list#1, $variable ); }
;

########################################################################
# Basic expression 

string ::
   = Lstring { $$ = $0; }
   = Lstringquot { $$ = $0; }
   = Lstringint {$$ = $0; }
;

variable ::
   = Lvariable { $$ = $0; }
;
   
primary_expression ::
   = function { $$ = $0; }
   = variable { $$ = $0; }
   = string   { $$ = $0; }
   = Ktrue     { $$ = $0; }
   = Kfalse    { $$ = $0; }
   = '(' expression ')' { $$ = $1; }
;
   
unary_expression ::
   = primary_expression { $$ = $0; }
   = Knot primary_expression { $$ = new Operator( this, opNot, PTK($1) ); }
;

string_expression ::
   = unary_expression {$$ = $0; }
   = string_expression '.' unary_expression { $$ = new Operator( this, opConcat, PTK($0), PTK($2) ); }
;

mult_expression ::
   = string_expression {$$ = $0; }
   = mult_expression '*' string_expression { $$ = new Operator( this, opMultiply, PTK($0), PTK($2) ); }
   = mult_expression '/' string_expression { $$ = new Operator( this, opDivide, PTK($0), PTK($2) ); }
;

plus_expression ::
   = mult_expression {$$ = $0; }
   = plus_expression '+' mult_expression { $$ = new Operator( this, opPlus, PTK($0), PTK($2) ); }
   = plus_expression '-' mult_expression { $$ = new Operator( this, opMinus, PTK($0), PTK($2) ); }
;

comp_expression ::
   = plus_expression {$$ = $0; }
   = plus_expression '<' plus_expression { $$ = new Operator( this, opLt, PTK($0), PTK($2) ); }
   = plus_expression '>' plus_expression { $$ = new Operator( this, opGt, PTK($0), PTK($2) ); }
   = plus_expression '<=' plus_expression { $$ = new Operator( this, opLe, PTK($0), PTK($2) ); }
   = plus_expression '>=' plus_expression { $$ = new Operator( this, opGe, PTK($0), PTK($2) ); }
   = plus_expression '==' plus_expression { $$ = new Operator( this, opEq, PTK($0), PTK($2) ); }
   = plus_expression '!=' plus_expression { $$ = new Operator( this, opNe, PTK($0), PTK($2) ); }
;

log_expression ::
   = comp_expression { $$ = $0; }
   = log_expression Kand comp_expression { $$ = new Operator( this, opAnd, PTK($0), PTK($2) ); }
   = log_expression Kor comp_expression { $$ = new Operator( this, opOr, PTK($0), PTK($2) ); }
;

expression ::
   = log_expression
    { $$ = $log_expression; }
   = expression ',' log_expression
    { $$ = JOIN($expression#1, $log_expression ); }
;

%%
/* #define DEBUG_syntax */
#include "scriptimp.hpp"

#include <iostream>

using namespace std;
using namespace Scripter;

#define PTK(x) (static_cast<Token *>(x))
#define JOIN(x,y) (PTK(x)->SetNext(PTK(y)))
#define FUNCID(x) ((static_cast<IdToken *>(x))->id)
