Fix SNAP::DatFile.pm to use new data types (and point data types?)

Combine grid code from dbl4 and SNAPLIB.  Issue with inconsistent conventions.

Fix searching for coordsys related files so that searches look relative to the coordsys.def folder, not elsewhere...

Improved handling of errors in setting up coordinate conversion - better error messages

Improve convergence criteria.  Don't work when for example just calculating rotation parameters...  Need a criteria based on SSR I think
Differential ENU error factor option in classifications, and for individual observations.
Additional data types in dat2site - lat/lon/height

Consider allowing arbitrary sets of correlated observations (too big change?).
Tool to calculate covariance matrix of arbitrary set of coordinates?

Add orthometric_vdatumerence for height offset

Add integer observation id to list of valid fields in observation data

Thoughts on things to do.
      
snap: Move refraction coefficients, bearing swing, etc into classifications for general handling.
  Then allow specification of each in terms of a classification, which may be the default one, 
  or any other.  Set up after reading the data .. populate parameters.  For compatibility use prm_id
  and refcoef just as currently - populating when rereading?  and only rewrite in final pass
  through? 
  
  Little immediate benefit?  Actually would be useful in WACA - currently have to choose what to use
    for bearing swings when create SNAP job.  Would be better to allow reselection in SNAP command
    file

Remove dump/reload coordsys functions.  Just save coordsys code in bin file.  (Note:
   currently don't properly handle grid functions - won't save deformation model data, 
   so really no sense in the rest of it)

General handling of CSV files for data (and coordinates?).  To simplify handling contract data
   in SNAP, and avoid duplication of contract data files.
   
     In command file:
        data_file format=xxxx
        coordinate_file format=xxxx [coordsys=xxxx]

     Formats defines by xxxx.dtf (delimited text format)

        dtf file defines data with

        FORMAT DELIM=CSV HEADER=Y/N
        FORMAT DELIM=WHITESPACE HEADER=Y/N
        FORMAT DELIM=x QUOTE=x ESCAPE=x HEADER=Y/N
        COLUMNS xxx xxx (required if HEADER=N)
        SKIP_LINES n

        OBSERVATION 
        TYPE xxx
        FROM xxx 
        TO xxx 
        FROM_HI xxx 
        TO_HI xxx 
        VALUE xxx 
        ERROR xxx 
        TIME xxx 
        ERROR_FACTOR xxx
        OBS_ID xxx
        ... other parameters ... rejected, refraction coef, brng swing (=classification), etc
        CLASSIFICATION name XXXX
        xxx_DEFAULT ....

        VECTOR_ERROR_TYPE xxx
        TIME_FORMAT xxx

        END_OBSERVATION


        
        LOOKUP name
        code value 
        ....
        default value
        END_LOOKUP

        FOr DATA/DATETIME xxx CAN be one of @FIELD[/@FIELD/@FIELD], VALUE, LOOKUP(@FIELD,CODE)

        [@]col
        col/name (=lookup)
        default ...
        "literal text" ("" for literal quote)

        Where dates/values are @col/@col/@col, values get compiled with white space and then interpreted with sscanf (or equivalent


==============================================================================================
Index: coordsys.h
===================================================================
--- coordsys.h	(revision 1256)
+++ coordsys.h	(working copy)
@@ -59,6 +59,7 @@
 	with a common reference system */
 
 typedef struct ref_frame_func_s ref_frame_func;
+typedef struct ref_deformation_s ref_deformation;
 
 typedef struct {
 	 char *code;        /* Code for the reference frame   */
@@ -73,6 +74,7 @@
 	 double ratio;      /* The scale as a ratio           */
          ref_frame_func *func;
                             /* Non-standard reference frame conversion function */
+         ref_deformation *def; /* Deformation function */
 	 } ref_frame;
 
 struct ref_frame_func_s {
@@ -85,10 +87,21 @@
          int (*xyz_to_std_func)( ref_frame *rf, double xyz[3] );
          int (*std_to_xyz_func)( ref_frame *rf, double xyz[3] );
          };
-         
 
+struct ref_deformation_s {
+         char *type;
+         char *description;
+         void *data;
+         double base_epoch;
+         void (*delete_func)(void *data);
+         int (*describe_func)(output_string_def *os, ref_frame *rf);
+         void *(*copy_func)(void *data);
+         int (*calc)( void *data, ref_frame *rf, double epoch, double denu[3]);
+         int (*apply)( void *data, ref_frame *rf,  double epochfrom, double epochto, double llh[3] );
+         };
+
 /* A projection.  projection_type_s is defined in a private header file,
-   crdsys_prj.h */
+   crdsyspj.h */
 
 typedef struct projection_type_s projection_type;
 
@@ -124,6 +137,9 @@
 typedef struct {
 	 coordsys *from;    /* Source reference frame */
 	 coordsys *to;      /* Target reference frame */
+     double   epochfrom; /* Source epoch */
+     double   epochto;   /* Target epoch */
+     char     usedef;    /* Flags whether the conversion will respect deformation models */
 	 char     valid;    /* Flags whether a conversion is possible */
 	 char     from_prj; /* Need projection of from system */
 	 char     from_el;  /* Need to convert from coords to geocentric */
@@ -169,6 +185,9 @@
 ref_frame_func *copy_ref_frame_func( ref_frame_func *rff );
 void delete_ref_frame_func( ref_frame_func *rff );
 
+ref_deformation *copy_ref_deformation( ref_deformation *rdf );
+void delete_ref_deformation( ref_deformation *rdf );
+
 void init_ref_frame( ref_frame *rf );
 
 	/* Routines relating to projections */
@@ -229,6 +248,8 @@
 ref_frame  *parse_ref_frame_def ( input_string_def *is,
                                   ellipsoid *(*getel)(char *code ) );
 ref_frame_func *parse_ref_frame_func_def ( input_string_def *is );
+ref_deformation *parse_ref_deformation_def ( input_string_def *is );
+
 projection *parse_projection_def( input_string_def *is );
 coordsys   *parse_coordsys_def  ( input_string_def *is,
                                   ref_frame *(*getrf)(char *code ));
@@ -251,6 +272,8 @@
 int is_geodetic( coordsys *cs );
 int is_geocentric( coordsys *cs );
 
+int has_deformation_model( coordsys *cs );
+
 /* Coordinates in range check functions.  Note that the latitude/longitude
    functions take pointers to the lat and long, as the longitude may be
    shifted by a mulltiple of 2*PI to get into range */
@@ -283,6 +306,13 @@
 void proj_to_geog( projection *prj, double easting, double northing,
                                   double *lon, double *lat );
 
+  /* Deformation calculations */
+
+void deformation_at_epoch( reference frame *rf, double lon, double lat, 
+                          double epoch, double denu[3] );
+void deformation_between_epochs( reference_frame *rf, double lon, double lat,
+                          double epochfrom, double epochto, double *rf );
+
   /* Conversion of coordinates from one coordinate system to another     */
   /* Converts coordinates, deflections, and undulations.  Input coords   */
   /* are either projection easting, northing, or long and lat in radians */
@@ -297,6 +327,9 @@
 int define_coord_conversion( coord_conversion *conv,
 			  coordsys *from, coordsys *to );
 
+int define_coord_epoch_conversion( coord_conversion *conv,
+			  coordsys *from, double epochfrom, coordsys *to, double epochto );
+
 int convert_coords( coord_conversion *conv,
                           double *fenh, double *fexu,
                           double *tenh, double *texu );
@@ -307,6 +340,7 @@
 /* point.                                                                */
 
 int  describe_ref_frame( output_string_def *os, ref_frame *rf );
+int  describe_deformation_model( output_string_def *os, ref_frame *rf );
 int  describe_ellipsoid( output_string_def *os, ellipsoid *el );
 int  describe_projection( output_string_def *os, projection *prj );
 int  describe_coordsys( output_string_def *os, coordsys *cs );
@@ -314,6 +348,13 @@
 /*=======================================================================*/
 /* Maintenance of lists of coordinate systems                            */
 
+  /* Install coordinates systems for selection using hard-coded parameters */
+
+void install_crdsys_nzgd49( void );
+void install_crdsys_wgs84( void );
+void install_crdsys_nzmg( void );
+void install_crdsys_nz_metre_circuits( void );
+
   /* Get definitions from a file file  */
 
 int install_crdsys_file( char *file_name );
